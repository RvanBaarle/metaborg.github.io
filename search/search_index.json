{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spoofax Language Workbench \u00b6 Spoofax is a platform for developing textual (domain-specific) programming languages. The platform provides the following ingredients: Meta-languages for high-level declarative language definition An interactive environment for developing languages using these meta-languages Code generators that produces parsers, type checkers, compilers, interpreters, and other tools from language definitions Generation of full-featured Eclipse editor plugins from language definitions An API for programmatically combining the components of a language implementation With Spoofax you can focus on the essence of language definition and ignore irrelevant implementation details. Get started by downloading and installing Spoofax or build it from source .","title":"Spoofax Language Designer's Workbench"},{"location":"#spoofax-language-workbench","text":"Spoofax is a platform for developing textual (domain-specific) programming languages. The platform provides the following ingredients: Meta-languages for high-level declarative language definition An interactive environment for developing languages using these meta-languages Code generators that produces parsers, type checkers, compilers, interpreters, and other tools from language definitions Generation of full-featured Eclipse editor plugins from language definitions An API for programmatically combining the components of a language implementation With Spoofax you can focus on the essence of language definition and ignore irrelevant implementation details. Get started by downloading and installing Spoofax or build it from source .","title":"Spoofax Language Workbench"},{"location":"getting-started/","text":"Getting started \u00b6 The quickest way to get started with Spoofax by downloading an instance of Eclipse with the latest release. Alternatively, you can install the Spoofax plugin into an existing Eclipse instance, use Homebrew on macOS, or download and build Spoofax from source. Installation \u00b6 The recommended way to get started with Spoofax is to download an Eclipse instance with the latest Spoofax plugin. The plugin also includes the Spoofax meta-languages. Alternatively, you can install the Spoofax plugin into an existing Eclipse instance, or download and build Spoofax from source. Choose the Eclipse Bundle installation (recommended) or the Eclipse Plugin installation: Eclipse Bundle Download an Eclipse instance with an embedded Java Runtime Environment (JRE) and the latest Spoofax plugin pre-installed for your platform: + macOS Intel (64-bit) + Linux x64 (64-bit) + Windows x64 (64-bit) Windows x86 (32-bit) Installation instructions . Download Eclipse with Spoofax without an embedded JRE . Nightly releases . Eclipse Plugin Perform a manual installation of the Spoofax plugin in Eclipse 3.5 or newer through the update site: https://artifacts.metaborg.org/content/unzip/releases-unzipped/org/metaborg/org.metaborg.spoofax.eclipse.updatesite/2.5.16/org.metaborg.spoofax.eclipse.updatesite-2.5.16-assembly.zip-unzip/ Installation instructions . Homebrew ( macOS) On macOS Spoofax can be installed easily using Homebrew . Install the latest release of Spoofax Eclipse as follows: brew tap metaborg/metaborg brew install --cask spoofax The optional command-line tools are installed with: brew install strategoxt Upgrading the Spoofax cask is not recommended Upgrading the Spoofax cask using brew cask upgrade --greedy will lose all manually installed plugins. It is recommended to use Eclipse update sites to keep Spoofax up-to-date. Quick Start \u00b6 Once installed, create a new Spoofax project: Right-click the Package Explorer , choose New \u2192 Project , and select Spoofax Language project from the Spoofax category. Provide a name for your new language and click Finish . Select the created language project and press Ctrl + Alt + B ( Cmd + Alt + B on macOS) to build the project. Create a new file with the extension registered to your language to test it. Follow one of the tutorials to learn more. Finding the filename extension of your language If you didn't explicitly specify a filename extension for your language, it is derived from the language name. You can find the filename extension for your language in editor/Main.esv at the extensions property.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"The quickest way to get started with Spoofax by downloading an instance of Eclipse with the latest release. Alternatively, you can install the Spoofax plugin into an existing Eclipse instance, use Homebrew on macOS, or download and build Spoofax from source.","title":"Getting started"},{"location":"getting-started/#installation","text":"The recommended way to get started with Spoofax is to download an Eclipse instance with the latest Spoofax plugin. The plugin also includes the Spoofax meta-languages. Alternatively, you can install the Spoofax plugin into an existing Eclipse instance, or download and build Spoofax from source. Choose the Eclipse Bundle installation (recommended) or the Eclipse Plugin installation: Eclipse Bundle Download an Eclipse instance with an embedded Java Runtime Environment (JRE) and the latest Spoofax plugin pre-installed for your platform: + macOS Intel (64-bit) + Linux x64 (64-bit) + Windows x64 (64-bit) Windows x86 (32-bit) Installation instructions . Download Eclipse with Spoofax without an embedded JRE . Nightly releases . Eclipse Plugin Perform a manual installation of the Spoofax plugin in Eclipse 3.5 or newer through the update site: https://artifacts.metaborg.org/content/unzip/releases-unzipped/org/metaborg/org.metaborg.spoofax.eclipse.updatesite/2.5.16/org.metaborg.spoofax.eclipse.updatesite-2.5.16-assembly.zip-unzip/ Installation instructions . Homebrew ( macOS) On macOS Spoofax can be installed easily using Homebrew . Install the latest release of Spoofax Eclipse as follows: brew tap metaborg/metaborg brew install --cask spoofax The optional command-line tools are installed with: brew install strategoxt Upgrading the Spoofax cask is not recommended Upgrading the Spoofax cask using brew cask upgrade --greedy will lose all manually installed plugins. It is recommended to use Eclipse update sites to keep Spoofax up-to-date.","title":"Installation"},{"location":"getting-started/#quick-start","text":"Once installed, create a new Spoofax project: Right-click the Package Explorer , choose New \u2192 Project , and select Spoofax Language project from the Spoofax category. Provide a name for your new language and click Finish . Select the created language project and press Ctrl + Alt + B ( Cmd + Alt + B on macOS) to build the project. Create a new file with the extension registered to your language to test it. Follow one of the tutorials to learn more. Finding the filename extension of your language If you didn't explicitly specify a filename extension for your language, it is derived from the language name. You can find the filename extension for your language in editor/Main.esv at the extensions property.","title":"Quick Start"},{"location":"nightly/","text":"Nightly Releases \u00b6 Use the nightly (development) releases of Spoofax only if you want to be on the cutting-edge of Spoofax development. Choose the Eclipse Bundle installation (recommended), the Eclipse Plugin installation, or the From Source installation: Eclipse Bundle with JRE (recommended) Download an Eclipse instance with an embedded Java Runtime Environment (JRE) and the latest Spoofax plugin pre-installed for your platform: + macOS Intel (64-bit) + Linux x64 (64-bit) + Windows x64 (64-bit) + Windows x86 (32-bit) Installation instructions . Eclipse Bundle Download an Eclipse instance (without JRE) and the latest Spoofax plugin pre-installed for your platform: macOS Intel (64-bit) Linux x64 (64-bit) Windows x64 (64-bit) Windows x86 (32-bit) Installation instructions . Eclipse Plugin Perform a manual installation of the Spoofax plugin in Eclipse 3.5 or newer through the update site: http://buildfarm.metaborg.org/job/metaborg/job/spoofax-releng/job/master/lastSuccessfulBuild/artifact/dist/spoofax/eclipse/site/ Installation instructions . From Source Use Git to clone the Spoofax Github repository : HTTPS git clone https://github.com/metaborg/spoofax-releng.git HTTPS git clone git@github.com:metaborg/spoofax-releng.git GitHub CLI gh repo clone metaborg/spoofax-releng Installation instructions .","title":"Nightly Releases"},{"location":"nightly/#nightly-releases","text":"Use the nightly (development) releases of Spoofax only if you want to be on the cutting-edge of Spoofax development. Choose the Eclipse Bundle installation (recommended), the Eclipse Plugin installation, or the From Source installation: Eclipse Bundle with JRE (recommended) Download an Eclipse instance with an embedded Java Runtime Environment (JRE) and the latest Spoofax plugin pre-installed for your platform: + macOS Intel (64-bit) + Linux x64 (64-bit) + Windows x64 (64-bit) + Windows x86 (32-bit) Installation instructions . Eclipse Bundle Download an Eclipse instance (without JRE) and the latest Spoofax plugin pre-installed for your platform: macOS Intel (64-bit) Linux x64 (64-bit) Windows x64 (64-bit) Windows x86 (32-bit) Installation instructions . Eclipse Plugin Perform a manual installation of the Spoofax plugin in Eclipse 3.5 or newer through the update site: http://buildfarm.metaborg.org/job/metaborg/job/spoofax-releng/job/master/lastSuccessfulBuild/artifact/dist/spoofax/eclipse/site/ Installation instructions . From Source Use Git to clone the Spoofax Github repository : HTTPS git clone https://github.com/metaborg/spoofax-releng.git HTTPS git clone git@github.com:metaborg/spoofax-releng.git GitHub CLI gh repo clone metaborg/spoofax-releng Installation instructions .","title":"Nightly Releases"},{"location":"background/","text":"Background \u00b6 This section contains information on the ideas, architecture, and design decisions behind Spoofax. For the Spoofax language reference, see the References section. Documentation No background yet.","title":"Background"},{"location":"background/#background","text":"This section contains information on the ideas, architecture, and design decisions behind Spoofax. For the Spoofax language reference, see the References section. Documentation No background yet.","title":"Background"},{"location":"background/documentation/","text":"Documentation \u00b6 This page explains the documentation's technology and structure, and how you can contribute. Technology \u00b6 This documentation uses MkDocs , a fast and simple static site generated that's geared towards building project documentation from Markdown files. In particular, this website uses MkDocs Material , which provides a clean look, easy customization, and many features for technical documentation. Structure \u00b6 The structure of this documentation follows the Grand Unified Theory of Documentation where documentation is split into four categories: Tutorials : oriented to learning , enabling newcomers to get started through a lesson, analogous to teaching a child how to cook. How-Tos : oriented to a particular goal , showing how to solve a specific problem through a series of steps, analogous to a recipe in a cookbook. Reference : oriented to information , describing the machinery through dry description, analogous to an encyclopaedia article. Background : oriented to understanding , explaining through discursive explanation, analogous to an article on culinary social history. Contributing \u00b6 Contributing to the documentation is easy. Quick changes and fixing typos can be done by clicking the button in the top-right corner of a page, and editing and saving the underlying Markdown file. More considerable contributions can be made by cloning this repository locally, and editing the Markdown files there. The easiest way to get a live preview (automatically reloading) of your changes, is by installing Docker and executing make from the root directory. This will serve the latest changes to localhost:8000 . MkDocs Reference Extensions Reference Adding Pages \u00b6 The first page mentioned in nav under a section should be some index.md (without a title), and will be used as the index page (home page) for that section. When you add a new page, don't forget to add it to the nav element in the mkdocs.yml file, or it will not show up. Links \u00b6 Links to other Markdown pages should be written as relative links. For example, to link to tutorials from the background/index.md page, write the relative link including the Markdown file: ```markdown [Tutorials](../tutorials/index.md) ``` Absolute Links are Not Supported Absolute links are not supported, and while they may work locally, they break in production. Citations \u00b6 To cite a paper or work, first ensure the citation is in a bibliography ( .bib ) file in the /bibliographies/ directory. For example, in the bibliographies/spoofax.bib file, we find: @inproceedings { KatsV10 , title = {The {Spoofax} language workbench: rules for declarative specification of languages and {IDEs}} , author = {Lennart C. L. Kats and Eelco Visser} , year = {2010} , doi = {10.1145/1869459.1869497} , url = {https://doi.org/10.1145/1869459.1869497} , pages = {444-463} , booktitle = {Proceedings of the 25th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA 2010} , } Adding References To add a reference, add it on Researchr to the Spoofax bibliography . Then on the command-line, invoke the following to regenerate the spoofax.bib file: make bib Do not change the spoofax.bib file manually, it is generated and updated through Researchr . Then reference the work like this: The Spoofax language workbench[@KatsV10] is vital to declarative language development. Finally, add a place for the bibliography footnotes to be added (usually at the end of the file) by adding the following line to the file: \\bibliography The line will be rendered as: The Spoofax language workbench 1 is vital to declarative language development. And the references will be at the bottom of this page. If the citation appears rendered as Spoofax language workbench[^1] , then you might have forgotten to add a place for the bibliography. Technical Details \u00b6 The structure of the documentation repository is as follows (hover over any of the files to see its description): \ud83d\udce6 / \u2523 \ud83d\udcc1 .github \u2523 \ud83d\udcc2 docs \u2503 \u2523 \ud83d\udcc2 assets \u2503 \u2503 \u2523 \ud83d\udcdc favicon.png \u2503 \u2503 \u2523 \ud83d\udcdc hero-border-dark.svg \u2503 \u2503 \u2523 \ud83d\udcdc hero-border-light.svg \u2503 \u2503 \u2523 \ud83d\udcdc hero.svg \u2503 \u2503 \u2523 \ud83d\udcdc logo.svg \u2503 \u2503 \u2517 \ud83d\udcdc styles.css \u2503 \u2523 \ud83d\udcc2 background \u2503 \u2503 \u2517 \ud83d\udcdc index.md \u2503 \u2523 \ud83d\udcc2 howtos \u2503 \u2503 \u2517 \ud83d\udcdc index.md \u2503 \u2523 \ud83d\udcc2 reference \u2503 \u2503 \u2517 \ud83d\udcdc index.md \u2503 \u2523 \ud83d\udcc2 tutorials \u2503 \u2503 \u2517 \ud83d\udcdc index.md \u2503 \u2517 \ud83d\udcdc index.md \u2523 \ud83d\udcc1 overrides \u2503 \u2523 \ud83d\udcdc index.html \u2503 \u2517 \ud83d\udcdc main.html \u2523 \ud83d\udcdc .gitignore \u2523 \ud83d\udcdc Dockerfile \u2523 \ud83d\udcdc LICENSE \u2523 \ud83d\udcdc Makefile \u2523 \ud83d\udcdc mkdocs_requirements.txt \u2523 \ud83d\udcdc mkdocs.yml \u2517 \ud83d\udcdc README.md Lennart C. L. Kats and Eelco Visser. The Spoofax language workbench: rules for declarative specification of languages and IDEs. In William R. Cook, Siobh\u00e1n Clarke, and Martin C. Rinard, editors, Proceedings of the 25 th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA 2010 , 444\u2013463. Reno/Tahoe, Nevada, 2010. ACM. URL: https://doi.org/10.1145/1869459.1869497 , doi:10.1145/1869459.1869497 . \u21a9","title":"Documentation"},{"location":"background/documentation/#documentation","text":"This page explains the documentation's technology and structure, and how you can contribute.","title":"Documentation"},{"location":"background/documentation/#technology","text":"This documentation uses MkDocs , a fast and simple static site generated that's geared towards building project documentation from Markdown files. In particular, this website uses MkDocs Material , which provides a clean look, easy customization, and many features for technical documentation.","title":"Technology"},{"location":"background/documentation/#structure","text":"The structure of this documentation follows the Grand Unified Theory of Documentation where documentation is split into four categories: Tutorials : oriented to learning , enabling newcomers to get started through a lesson, analogous to teaching a child how to cook. How-Tos : oriented to a particular goal , showing how to solve a specific problem through a series of steps, analogous to a recipe in a cookbook. Reference : oriented to information , describing the machinery through dry description, analogous to an encyclopaedia article. Background : oriented to understanding , explaining through discursive explanation, analogous to an article on culinary social history.","title":"Structure"},{"location":"background/documentation/#contributing","text":"Contributing to the documentation is easy. Quick changes and fixing typos can be done by clicking the button in the top-right corner of a page, and editing and saving the underlying Markdown file. More considerable contributions can be made by cloning this repository locally, and editing the Markdown files there. The easiest way to get a live preview (automatically reloading) of your changes, is by installing Docker and executing make from the root directory. This will serve the latest changes to localhost:8000 . MkDocs Reference Extensions Reference","title":"Contributing"},{"location":"background/documentation/#adding-pages","text":"The first page mentioned in nav under a section should be some index.md (without a title), and will be used as the index page (home page) for that section. When you add a new page, don't forget to add it to the nav element in the mkdocs.yml file, or it will not show up.","title":"Adding Pages"},{"location":"background/documentation/#links","text":"Links to other Markdown pages should be written as relative links. For example, to link to tutorials from the background/index.md page, write the relative link including the Markdown file: ```markdown [Tutorials](../tutorials/index.md) ``` Absolute Links are Not Supported Absolute links are not supported, and while they may work locally, they break in production.","title":"Links"},{"location":"background/documentation/#citations","text":"To cite a paper or work, first ensure the citation is in a bibliography ( .bib ) file in the /bibliographies/ directory. For example, in the bibliographies/spoofax.bib file, we find: @inproceedings { KatsV10 , title = {The {Spoofax} language workbench: rules for declarative specification of languages and {IDEs}} , author = {Lennart C. L. Kats and Eelco Visser} , year = {2010} , doi = {10.1145/1869459.1869497} , url = {https://doi.org/10.1145/1869459.1869497} , pages = {444-463} , booktitle = {Proceedings of the 25th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA 2010} , } Adding References To add a reference, add it on Researchr to the Spoofax bibliography . Then on the command-line, invoke the following to regenerate the spoofax.bib file: make bib Do not change the spoofax.bib file manually, it is generated and updated through Researchr . Then reference the work like this: The Spoofax language workbench[@KatsV10] is vital to declarative language development. Finally, add a place for the bibliography footnotes to be added (usually at the end of the file) by adding the following line to the file: \\bibliography The line will be rendered as: The Spoofax language workbench 1 is vital to declarative language development. And the references will be at the bottom of this page. If the citation appears rendered as Spoofax language workbench[^1] , then you might have forgotten to add a place for the bibliography.","title":"Citations"},{"location":"background/documentation/#technical-details","text":"The structure of the documentation repository is as follows (hover over any of the files to see its description): \ud83d\udce6 / \u2523 \ud83d\udcc1 .github \u2523 \ud83d\udcc2 docs \u2503 \u2523 \ud83d\udcc2 assets \u2503 \u2503 \u2523 \ud83d\udcdc favicon.png \u2503 \u2503 \u2523 \ud83d\udcdc hero-border-dark.svg \u2503 \u2503 \u2523 \ud83d\udcdc hero-border-light.svg \u2503 \u2503 \u2523 \ud83d\udcdc hero.svg \u2503 \u2503 \u2523 \ud83d\udcdc logo.svg \u2503 \u2503 \u2517 \ud83d\udcdc styles.css \u2503 \u2523 \ud83d\udcc2 background \u2503 \u2503 \u2517 \ud83d\udcdc index.md \u2503 \u2523 \ud83d\udcc2 howtos \u2503 \u2503 \u2517 \ud83d\udcdc index.md \u2503 \u2523 \ud83d\udcc2 reference \u2503 \u2503 \u2517 \ud83d\udcdc index.md \u2503 \u2523 \ud83d\udcc2 tutorials \u2503 \u2503 \u2517 \ud83d\udcdc index.md \u2503 \u2517 \ud83d\udcdc index.md \u2523 \ud83d\udcc1 overrides \u2503 \u2523 \ud83d\udcdc index.html \u2503 \u2517 \ud83d\udcdc main.html \u2523 \ud83d\udcdc .gitignore \u2523 \ud83d\udcdc Dockerfile \u2523 \ud83d\udcdc LICENSE \u2523 \ud83d\udcdc Makefile \u2523 \ud83d\udcdc mkdocs_requirements.txt \u2523 \ud83d\udcdc mkdocs.yml \u2517 \ud83d\udcdc README.md Lennart C. L. Kats and Eelco Visser. The Spoofax language workbench: rules for declarative specification of languages and IDEs. In William R. Cook, Siobh\u00e1n Clarke, and Martin C. Rinard, editors, Proceedings of the 25 th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA 2010 , 444\u2013463. Reno/Tahoe, Nevada, 2010. ACM. URL: https://doi.org/10.1145/1869459.1869497 , doi:10.1145/1869459.1869497 . \u21a9","title":"Technical Details"},{"location":"background/bibliography/stratego/","text":"A Stratego Bibliography \u00b6 The original publication on Stratego appeared in ICFP'98 1 and introduced named rewrite rules and a language of strategy combinators. The paper also introduced contextual terms. These where eventually replaced by dynamic rewrite rules 2 . References \u00b6 Eelco Visser, Zine-El-Abidine Benaissa, and Andrew P. Tolmach. Building program optimizers with rewriting strategies. In Matthias Felleisen, Paul Hudak, and Christian Queinnec, editors, Proceedings of the third ACM SIGPLAN international conference on Functional programming , 13\u201326. Baltimore, Maryland, United States, 1998. ACM. URL: http://doi.acm.org/10.1145/289423.289425 , doi:10.1145/289423.289425 . \u21a9 Martin Bravenboer, Arthur van Dam, Karina Olmos, and Eelco Visser. Program transformation with scoped dynamic rewrite rules. Fundamenta Informaticae , 69(1-2):123\u2013178, 2006. URL: https://content.iospress.com/articles/fundamenta-informaticae/fi69-1-2-06 . \u21a9","title":"A Stratego Bibliography"},{"location":"background/bibliography/stratego/#a-stratego-bibliography","text":"The original publication on Stratego appeared in ICFP'98 1 and introduced named rewrite rules and a language of strategy combinators. The paper also introduced contextual terms. These where eventually replaced by dynamic rewrite rules 2 .","title":"A Stratego Bibliography"},{"location":"background/bibliography/stratego/#references","text":"Eelco Visser, Zine-El-Abidine Benaissa, and Andrew P. Tolmach. Building program optimizers with rewriting strategies. In Matthias Felleisen, Paul Hudak, and Christian Queinnec, editors, Proceedings of the third ACM SIGPLAN international conference on Functional programming , 13\u201326. Baltimore, Maryland, United States, 1998. ACM. URL: http://doi.acm.org/10.1145/289423.289425 , doi:10.1145/289423.289425 . \u21a9 Martin Bravenboer, Arthur van Dam, Karina Olmos, and Eelco Visser. Program transformation with scoped dynamic rewrite rules. Fundamenta Informaticae , 69(1-2):123\u2013178, 2006. URL: https://content.iospress.com/articles/fundamenta-informaticae/fi69-1-2-06 . \u21a9","title":"References"},{"location":"background/statix/","text":"Statix Background \u00b6 rule selection open/closed world reasoning ( try /DWF/DLeq) desugaring of functional rules Internal representation of scope graphs Query Scheduling/Permission to Extend","title":"Statix Background"},{"location":"background/statix/#statix-background","text":"rule selection open/closed world reasoning ( try /DWF/DLeq) desugaring of functional rules Internal representation of scope graphs Query Scheduling/Permission to Extend","title":"Statix Background"},{"location":"howtos/","text":"How-To's \u00b6 These are some How-To's that help you to get to a specific goal or result with Spoofax. For hands-on tutorials on learning Spoofax, see the Tutorials section. For the Spoofax languages references, see the References section. Installation and Build \u00b6 Install the Eclipse with Spoofax Plugin Bundle Install the Spoofax Eclipse Plugin Manually Install Spoofax from Source","title":"How-To's"},{"location":"howtos/#how-tos","text":"These are some How-To's that help you to get to a specific goal or result with Spoofax. For hands-on tutorials on learning Spoofax, see the Tutorials section. For the Spoofax languages references, see the References section.","title":"How-To's"},{"location":"howtos/#installation-and-build","text":"Install the Eclipse with Spoofax Plugin Bundle Install the Spoofax Eclipse Plugin Manually Install Spoofax from Source","title":"Installation and Build"},{"location":"howtos/install-eclipse-bundle/","text":"Install the Eclipse with Spoofax Plugin Bundle \u00b6 Install an Eclipse instance with the latest stable release of the Spoofax plugin pre-installed for your platform: Eclipse with JRE (recommended) Eclipse bundle including the Spoofax plugin with embedded Java Runtime Environment (JRE) (recommended): + macOS Intel (64-bit) + Linux x64 (64-bit) + Windows x64 (64-bit) + Windows x86 (32-bit) Eclipse Eclipse bundle including the Spoofax plugin ( no embedded JRE ): macOS Intel (64-bit) Linux x64 (64-bit) Windows x64 (64-bit) Windows x86 (32-bit) Nightly releases . Troubleshooting \u00b6 macOS: \"Eclipse\" cannot be opened because the developer could not be verified \u00b6 macOS puts unverified binaries in 'quarantine' and disallows their execution. To remove the com.apple.quarantine attribute, do: xattr -rc Eclipse.app Eclipse does not start, or complains about missing Java \u00b6 Download the Eclipse bundle with embedded JRE . Otherwise, ensure you have a distribution of Java installed. Then in eclipse.ini , add a -vm line at the top of the file, followed by the path to the Java installation. For example, with SDKMan! on macOS: -vm /Users/myusername/.sdkman/candidates/java/current/jre/lib/jli/libjli.dylib","title":"Install the Eclipse with Spoofax Plugin Bundle"},{"location":"howtos/install-eclipse-bundle/#install-the-eclipse-with-spoofax-plugin-bundle","text":"Install an Eclipse instance with the latest stable release of the Spoofax plugin pre-installed for your platform: Eclipse with JRE (recommended) Eclipse bundle including the Spoofax plugin with embedded Java Runtime Environment (JRE) (recommended): + macOS Intel (64-bit) + Linux x64 (64-bit) + Windows x64 (64-bit) + Windows x86 (32-bit) Eclipse Eclipse bundle including the Spoofax plugin ( no embedded JRE ): macOS Intel (64-bit) Linux x64 (64-bit) Windows x64 (64-bit) Windows x86 (32-bit) Nightly releases .","title":"Install the Eclipse with Spoofax Plugin Bundle"},{"location":"howtos/install-eclipse-bundle/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"howtos/install-eclipse-bundle/#macos-eclipse-cannot-be-opened-because-the-developer-could-not-be-verified","text":"macOS puts unverified binaries in 'quarantine' and disallows their execution. To remove the com.apple.quarantine attribute, do: xattr -rc Eclipse.app","title":" macOS: \"Eclipse\" cannot be opened because the developer could not be verified"},{"location":"howtos/install-eclipse-bundle/#eclipse-does-not-start-or-complains-about-missing-java","text":"Download the Eclipse bundle with embedded JRE . Otherwise, ensure you have a distribution of Java installed. Then in eclipse.ini , add a -vm line at the top of the file, followed by the path to the Java installation. For example, with SDKMan! on macOS: -vm /Users/myusername/.sdkman/candidates/java/current/jre/lib/jli/libjli.dylib","title":"Eclipse does not start, or complains about missing Java"},{"location":"howtos/install-eclipse-plugin-manually/","text":"Install the Spoofax Eclipse Plugin Manually \u00b6 Perform a manual installation of the Spoofax plugin in Eclipse 3.5 or newer. In Eclipse, go to menu Help \u2192 Install New Software . In the Work with: text area, type: https://artifacts.metaborg.org/content/unzip/releases-unzipped/org/metaborg/org.metaborg.spoofax.eclipse.updatesite/2.5.16/org.metaborg.spoofax.eclipse.updatesite-2.5.16-assembly.zip-unzip/ ( Nightly releases ). Uncheck Group items by category to make the plugin visible. Check Spoofax Eclipse meta-tooling , Spoofax Eclipse meta-tooling M2E integration and Spoofax Eclipse runtime . Click Install and go through the remaining steps. Restart Eclipse.","title":"Install the Spoofax Eclipse Plugin Manually"},{"location":"howtos/install-eclipse-plugin-manually/#install-the-spoofax-eclipse-plugin-manually","text":"Perform a manual installation of the Spoofax plugin in Eclipse 3.5 or newer. In Eclipse, go to menu Help \u2192 Install New Software . In the Work with: text area, type: https://artifacts.metaborg.org/content/unzip/releases-unzipped/org/metaborg/org.metaborg.spoofax.eclipse.updatesite/2.5.16/org.metaborg.spoofax.eclipse.updatesite-2.5.16-assembly.zip-unzip/ ( Nightly releases ). Uncheck Group items by category to make the plugin visible. Check Spoofax Eclipse meta-tooling , Spoofax Eclipse meta-tooling M2E integration and Spoofax Eclipse runtime . Click Install and go through the remaining steps. Restart Eclipse.","title":"Install the Spoofax Eclipse Plugin Manually"},{"location":"howtos/install-from-source/","text":"Install Spoofax from Source \u00b6 Perform a manual build and installation of cutting-edge Spoofax from source, by first cloning the Git repository: HTTPS git clone https://github.com/metaborg/spoofax-releng.git HTTPS git clone git@github.com:metaborg/spoofax-releng.git GitHub CLI gh repo clone metaborg/spoofax-releng Then: Using a terminal, navigate to the root of the spoofax-releng repository. (Optional.) Generate a new Maven ~/.m2/settings.xml with the Spoofax repository information. ./b gen-mvn-settings This will overwrite your existing ~/.m2/settings.xml file! Invoke the following command to build Spoofax and its submodules and meta-languages: ./b build all (Optional.) Generate a new Eclipse instance with the Spoofax plugin embedded into it: ./b gen-eclipse --destination Spoofax.app","title":"Install Spoofax from Source"},{"location":"howtos/install-from-source/#install-spoofax-from-source","text":"Perform a manual build and installation of cutting-edge Spoofax from source, by first cloning the Git repository: HTTPS git clone https://github.com/metaborg/spoofax-releng.git HTTPS git clone git@github.com:metaborg/spoofax-releng.git GitHub CLI gh repo clone metaborg/spoofax-releng Then: Using a terminal, navigate to the root of the spoofax-releng repository. (Optional.) Generate a new Maven ~/.m2/settings.xml with the Spoofax repository information. ./b gen-mvn-settings This will overwrite your existing ~/.m2/settings.xml file! Invoke the following command to build Spoofax and its submodules and meta-languages: ./b build all (Optional.) Generate a new Eclipse instance with the Spoofax plugin embedded into it: ./b gen-eclipse --destination Spoofax.app","title":"Install Spoofax from Source"},{"location":"howtos/stratego/exchanging-terms/","text":"How to Exchange Terms \u00b6 The term format described above is used in Stratego programs to denote terms, but is also used to exchange terms between programs. Thus, the internal format and the external format exactly coincide. Of course, internally a Stratego program uses a data-structure in memory with pointers rather than manipulating a textual representation of terms. But this is completely hidden from the Stratego programmer.","title":"How to Exchange Terms"},{"location":"howtos/stratego/exchanging-terms/#how-to-exchange-terms","text":"The term format described above is used in Stratego programs to denote terms, but is also used to exchange terms between programs. Thus, the internal format and the external format exactly coincide. Of course, internally a Stratego program uses a data-structure in memory with pointers rather than manipulating a textual representation of terms. But this is completely hidden from the Stratego programmer.","title":"How to Exchange Terms"},{"location":"howtos/stratego/inspecting-terms/","text":"How To Inspect Terms \u00b6 As a Stratego programmer you will be looking a lot at raw ATerms. Stratego pioneers did this by opening an ATerm file in emacs and trying to get a sense of the structure by parenthesis highlighting and inserting newlines here and there. These days your life is much more pleasant through pretty-printing ATerms, which adds layout to a term to make it readable. For example, parsing the following program let function fact(n : int) : int = if n < 1 then 1 else (n * fact(n - 1)) in printint(fact(10)) end produces the following ATerm: Let([FunDecs([FunDec(\"fact\",[FArg(\"n\",Tp(Tid(\"int\")))],Tp(Tid(\"int\")), If(Lt(Var(\"n\"),Int(\"1\")),Int(\"1\"),Seq([Times(Var(\"n\"),Call(Var(\"fact\"), [Minus(Var(\"n\"),Int(\"1\"))]))])))])],[Call(Var(\"printint\"),[Call(Var( \"fact\"),[Int(\"10\")])])]) By pretty-printing the term we get a much more readable term: Let( [ FunDecs( [ FunDec( \"fact\" , [FArg(\"n\", Tp(Tid(\"int\")))] , Tp(Tid(\"int\")) , If( Lt(Var(\"n\"), Int(\"1\")) , Int(\"1\") , Seq([ Times(Var(\"n\"), Call(Var(\"fact\"), [Minus(Var(\"n\"), Int(\"1\"))])) ]) ) ) ] ) ] , [ Call(Var(\"printint\"), [Call(Var(\"fact\"), [Int(\"10\")])]) ] ) In Spoofax/Eclipse, you will find that in some contexts ATerms are automatically pretty-printed, whereas in others they are simply printed linearly. However, you can obtain assistance with perceiving the structure of any ATerm by writing it into a file with the \".aterm\" extension and opening it in the Spoofax Editor in Eclipse. On the right there will be a convenient Outline Navigator which allows you to select any node in the ATerm and see the entire subtree below it highlighted in the editor.","title":"How To Inspect Terms"},{"location":"howtos/stratego/inspecting-terms/#how-to-inspect-terms","text":"As a Stratego programmer you will be looking a lot at raw ATerms. Stratego pioneers did this by opening an ATerm file in emacs and trying to get a sense of the structure by parenthesis highlighting and inserting newlines here and there. These days your life is much more pleasant through pretty-printing ATerms, which adds layout to a term to make it readable. For example, parsing the following program let function fact(n : int) : int = if n < 1 then 1 else (n * fact(n - 1)) in printint(fact(10)) end produces the following ATerm: Let([FunDecs([FunDec(\"fact\",[FArg(\"n\",Tp(Tid(\"int\")))],Tp(Tid(\"int\")), If(Lt(Var(\"n\"),Int(\"1\")),Int(\"1\"),Seq([Times(Var(\"n\"),Call(Var(\"fact\"), [Minus(Var(\"n\"),Int(\"1\"))]))])))])],[Call(Var(\"printint\"),[Call(Var( \"fact\"),[Int(\"10\")])])]) By pretty-printing the term we get a much more readable term: Let( [ FunDecs( [ FunDec( \"fact\" , [FArg(\"n\", Tp(Tid(\"int\")))] , Tp(Tid(\"int\")) , If( Lt(Var(\"n\"), Int(\"1\")) , Int(\"1\") , Seq([ Times(Var(\"n\"), Call(Var(\"fact\"), [Minus(Var(\"n\"), Int(\"1\"))])) ]) ) ) ] ) ] , [ Call(Var(\"printint\"), [Call(Var(\"fact\"), [Int(\"10\")])]) ] ) In Spoofax/Eclipse, you will find that in some contexts ATerms are automatically pretty-printed, whereas in others they are simply printed linearly. However, you can obtain assistance with perceiving the structure of any ATerm by writing it into a file with the \".aterm\" extension and opening it in the Spoofax Editor in Eclipse. On the right there will be a convenient Outline Navigator which allows you to select any node in the ATerm and see the entire subtree below it highlighted in the editor.","title":"How To Inspect Terms"},{"location":"howtos/stratego/run-stratego-programs/","text":"How to Run Stratego Programs \u00b6","title":"How to Run Stratego Programs"},{"location":"howtos/stratego/run-stratego-programs/#how-to-run-stratego-programs","text":"","title":"How to Run Stratego Programs"},{"location":"references/","text":"References \u00b6 This are the Spoofax and meta-language references. For more background information on the ideas, architecture, and design decisions behind Spoofax and its meta-languages, see the Background section. The reference section should explain language constructs (syntax, statics, dynamics) and be structured following a taxonomy of the language Table of Contents \u00b6 SDF3 (Jasper) Statix (Aron) FlowSpec (Matthijs, Jeff) Stratego (Eelco, Jeff) PIE (Ivo, Gabri\u00ebl) MkDocs (Dani\u00ebl) bibtex syntax highlighting ESV / editor services Reviewing Peter Toine","title":"References"},{"location":"references/#references","text":"This are the Spoofax and meta-language references. For more background information on the ideas, architecture, and design decisions behind Spoofax and its meta-languages, see the Background section. The reference section should explain language constructs (syntax, statics, dynamics) and be structured following a taxonomy of the language","title":"References"},{"location":"references/#table-of-contents","text":"SDF3 (Jasper) Statix (Aron) FlowSpec (Matthijs, Jeff) Stratego (Eelco, Jeff) PIE (Ivo, Gabri\u00ebl) MkDocs (Dani\u00ebl) bibtex syntax highlighting ESV / editor services Reviewing Peter Toine","title":"Table of Contents"},{"location":"references/config/","text":"Language Configuration \u00b6 metaborg.yaml","title":"Language Configuration"},{"location":"references/config/#language-configuration","text":"metaborg.yaml","title":"Language Configuration"},{"location":"references/config/analyzer/","text":"Analyzer \u00b6 ESV: Language Analyzer Analysis Context Observer","title":"Analyzer"},{"location":"references/config/analyzer/#analyzer","text":"ESV: Language Analyzer Analysis Context Observer","title":"Analyzer"},{"location":"references/config/file-operations/","text":"Files \u00b6 Language File Extensions \u00b6 The language file extensions are configured in the language section extensions key of an ESV file . They are specified without a leading dot: language extensions : ent Multiple extensions can be set with a comma-separated list: language extensions : ent , entity , entities This will assign foo.ent , foo.entity , and foo.entities to the language. Language File Extensions On-Save","title":"Files"},{"location":"references/config/file-operations/#files","text":"","title":"Files"},{"location":"references/config/file-operations/#language-file-extensions","text":"The language file extensions are configured in the language section extensions key of an ESV file . They are specified without a leading dot: language extensions : ent Multiple extensions can be set with a comma-separated list: language extensions : ent , entity , entities This will assign foo.ent , foo.entity , and foo.entities to the language. Language File Extensions On-Save","title":"Language File Extensions"},{"location":"references/config/transformations/","text":"Transformations \u00b6 ESV: Language Transformations Providers","title":"Transformations"},{"location":"references/config/transformations/#transformations","text":"ESV: Language Transformations Providers","title":"Transformations"},{"location":"references/editor-services/","text":"Editor Services \u00b6 ESV Renaming Code Completion","title":"Editor Services"},{"location":"references/editor-services/#editor-services","text":"ESV Renaming Code Completion","title":"Editor Services"},{"location":"references/editor-services/builders/","text":"Builders \u00b6 Deprecated Use menus instead. Builders are a deprecated configuration section in ESV files.","title":"Builders"},{"location":"references/editor-services/builders/#builders","text":"Deprecated Use menus instead. Builders are a deprecated configuration section in ESV files.","title":"Builders"},{"location":"references/editor-services/code-completion/","text":"","title":"Code completion"},{"location":"references/editor-services/esv/","text":"ESV \u00b6 The Editor Service (ESV) language is a declarative meta-language for configuring the editor services of a language. For example, the following ESV code fragment configures the syntax highlighting for a language, based on the types of tokens: module color colorer keyword : 153 51 153 identifier : black string : 177 47 2 number : 17 131 22 operator : black layout : 63 127 95 italic Structure \u00b6 ESV files end with the .esv extension, and are by convention placed in the editor/ folder of a language project. Each ESV file defines a module for the file, followed by import statements and then the main configuration sections. Each section consists of a number of keys and values. Main File By convention, the main ESV file of a language project must live at editor/Main.esv (default) or editor/main.esv . Other ESV files can be (transitively) imported from the main ESV file. Module Definition \u00b6 An ESV file starts with a module definition at the top of the file: module $ModuleName The module name is the filename of the ESV file without the exttension, and relative to the editor/ directory. For example, the module editor/mylang/Syntax.esv would have the following module name: module mylang/Syntax Module names can only contains the alphanumeric characters and dash, underscore, and period, and use the forward slash ( / ) as the path separator. Module names cannot be in parent directories, so ../Syntax is not allowed. Imports \u00b6 The imports section is an optional section immediately following the module definition. When specified it is given as: imports $Imports For example, to import editor/Syntax.esv and editor/Analysis.esv : imports Syntax Analysis Imports are transitive. At most one imports section is permitted. When specified, the imports section cannot be empty. Configuration Sections \u00b6 The main body of an ESV file consists of any number of configuration sections. An example of a configuration section is: language line comment : \"//\" block comment : \"/*\" \"*/\" The configuration sections are hard-coded in the ESV language, but mostly use a consistent syntax for the keys and values. The following configuration sections are currently defined: analysis builders ( deprecated) colorer completions folding language ( Extensions , Parsing ) menus outliner refactorings references views","title":"ESV"},{"location":"references/editor-services/esv/#esv","text":"The Editor Service (ESV) language is a declarative meta-language for configuring the editor services of a language. For example, the following ESV code fragment configures the syntax highlighting for a language, based on the types of tokens: module color colorer keyword : 153 51 153 identifier : black string : 177 47 2 number : 17 131 22 operator : black layout : 63 127 95 italic","title":"ESV"},{"location":"references/editor-services/esv/#structure","text":"ESV files end with the .esv extension, and are by convention placed in the editor/ folder of a language project. Each ESV file defines a module for the file, followed by import statements and then the main configuration sections. Each section consists of a number of keys and values. Main File By convention, the main ESV file of a language project must live at editor/Main.esv (default) or editor/main.esv . Other ESV files can be (transitively) imported from the main ESV file.","title":"Structure"},{"location":"references/editor-services/esv/#module-definition","text":"An ESV file starts with a module definition at the top of the file: module $ModuleName The module name is the filename of the ESV file without the exttension, and relative to the editor/ directory. For example, the module editor/mylang/Syntax.esv would have the following module name: module mylang/Syntax Module names can only contains the alphanumeric characters and dash, underscore, and period, and use the forward slash ( / ) as the path separator. Module names cannot be in parent directories, so ../Syntax is not allowed.","title":"Module Definition"},{"location":"references/editor-services/esv/#imports","text":"The imports section is an optional section immediately following the module definition. When specified it is given as: imports $Imports For example, to import editor/Syntax.esv and editor/Analysis.esv : imports Syntax Analysis Imports are transitive. At most one imports section is permitted. When specified, the imports section cannot be empty.","title":"Imports"},{"location":"references/editor-services/esv/#configuration-sections","text":"The main body of an ESV file consists of any number of configuration sections. An example of a configuration section is: language line comment : \"//\" block comment : \"/*\" \"*/\" The configuration sections are hard-coded in the ESV language, but mostly use a consistent syntax for the keys and values. The following configuration sections are currently defined: analysis builders ( deprecated) colorer completions folding language ( Extensions , Parsing ) menus outliner refactorings references views","title":"Configuration Sections"},{"location":"references/editor-services/file-extensions/","text":"Language File Extensions \u00b6 The file extensions that the editor should recognize as files belonging to the language definition, are configured in the language section extensions key of an ESV file . They are specified without a leading dot: language extensions : ent Multiple extensions can be set with a comma-separated list: language extensions : ent , entity , entities This will assign for example foo.ent , foo.entity , and foo.entities to the language.","title":"Language File Extensions"},{"location":"references/editor-services/file-extensions/#language-file-extensions","text":"The file extensions that the editor should recognize as files belonging to the language definition, are configured in the language section extensions key of an ESV file . They are specified without a leading dot: language extensions : ent Multiple extensions can be set with a comma-separated list: language extensions : ent , entity , entities This will assign for example foo.ent , foo.entity , and foo.entities to the language.","title":"Language File Extensions"},{"location":"references/editor-services/hover/","text":"Hover \u00b6 ESV: References Hover","title":"Hover"},{"location":"references/editor-services/hover/#hover","text":"ESV: References Hover","title":"Hover"},{"location":"references/editor-services/menus/","text":"Menus \u00b6 Menus are used to bind actions of your language, such as transformations, to a menu in the IDE. Menus are defined using the menu keyword under a menus section in an ESV file , and can themselves contain submenus, actions, and separators. menu : $String $MenuOptions $MenuContribs Menu Contributions \u00b6 A menu has zero or more $MenuContrib , which are: action , submenu , or separator . Actions \u00b6 Actions (sometimes called builders ) are defined under a menu or submenu with syntax: action : $String = $StrategoCall $MenuOptions Submenus \u00b6 Submenus allow grouping of actions in nested menus. Their syntax is: sub menu : $String $MenuOptions $MenuContribs end Separators \u00b6 Separators allow inserting a separator in a menu list using the syntax: separator Menu Options \u00b6 The menu options specify the behavior of the menu item. The following modifiers are supported: Modifier Description (source) Action is performed on the parsed AST instead of the default analyzed AST. (openeditor) The result should be opened in a new editor. (realtime) (meta) Example \u00b6 An example menu: menus menu : \"Generate\" action : \"To normal form\" = to-normal-form ( source ) sub menu : \"To Java\" action : \"Abstract\" = to-java-abstract ( openeditor ) action : \"Concrete\" = to-java-concrete end","title":"Menus"},{"location":"references/editor-services/menus/#menus","text":"Menus are used to bind actions of your language, such as transformations, to a menu in the IDE. Menus are defined using the menu keyword under a menus section in an ESV file , and can themselves contain submenus, actions, and separators. menu : $String $MenuOptions $MenuContribs","title":"Menus"},{"location":"references/editor-services/menus/#menu-contributions","text":"A menu has zero or more $MenuContrib , which are: action , submenu , or separator .","title":"Menu Contributions"},{"location":"references/editor-services/menus/#actions","text":"Actions (sometimes called builders ) are defined under a menu or submenu with syntax: action : $String = $StrategoCall $MenuOptions","title":"Actions"},{"location":"references/editor-services/menus/#submenus","text":"Submenus allow grouping of actions in nested menus. Their syntax is: sub menu : $String $MenuOptions $MenuContribs end","title":"Submenus"},{"location":"references/editor-services/menus/#separators","text":"Separators allow inserting a separator in a menu list using the syntax: separator","title":"Separators"},{"location":"references/editor-services/menus/#menu-options","text":"The menu options specify the behavior of the menu item. The following modifiers are supported: Modifier Description (source) Action is performed on the parsed AST instead of the default analyzed AST. (openeditor) The result should be opened in a new editor. (realtime) (meta)","title":"Menu Options"},{"location":"references/editor-services/menus/#example","text":"An example menu: menus menu : \"Generate\" action : \"To normal form\" = to-normal-form ( source ) sub menu : \"To Java\" action : \"Abstract\" = to-java-abstract ( openeditor ) action : \"Concrete\" = to-java-concrete end","title":"Example"},{"location":"references/editor-services/outline/","text":"Outline \u00b6 ESV: Views Outline","title":"Outline"},{"location":"references/editor-services/outline/#outline","text":"ESV: Views Outline","title":"Outline"},{"location":"references/editor-services/parsing/","text":"Parsing \u00b6 Parsing language files in an editor is configured in the language section of an ESV file . The syntax is as follows: language table : $Path start symbols : $Sorts line comment : $String block comment : $String * $String fences : $Fences For example: language table : target/metaborg/sdf . tbl start symbols : File line comment : \"//\" block comment : \"/*\" * \"*/\" fences : [ ] ( ) { } Parse Table \u00b6 The parse table of your language is set with the table key. By default, the parse table of an SDF specification is always produced at target/metaborg/sdf.tbl . It is only necessary to change this configuration when a custom parse table is used. Start Symbols \u00b6 The start symbols option determine which start symbols to use when an editor is opened. This must be a subset of the start symbols defined in the SDF3 specification of your language. Multiple start symbols can be set with a comma-separated list: language start symbols : Start , Program Comments \u00b6 The syntax for comments is: language line comment : $String block comment : $String * $String For example, Java comments are specified as: language line comment : \"//\" block comment : \"/*\" * \"*/\" The line comment key determines how single-line comments are created. It is used by editors to toggle the comment for a single line. For example, in Eclipse, pressing ++ctrl+/++ (++cmd+/++ on macOS), respectively comments or uncomments the line. The block comment key determines how multi-line comments are created. It is used when a whole block needs to be commented or uncommented. A block comment is described by the two strings denoting the start and end symbols of the block comment respectively. Fences \u00b6 Fences for bracket matching are set as follows: language fences : $Fences The fences key determines which symbols to use and match for bracket matching. A single fence is defined by a starting and closing symbol. Multiple fences can be set with a space-separated list. Fences are used to do bracket matching in text editors. For example, the default fences in a new Spoofax language project are: language fences : [ ] ( ) { } Multi-Character Fences Fences can contain multiple characters, but some implementations may not handle bracket matching with multiple fence characters. For example, Eclipse does not handle this case and ignores multi-character fences.","title":"Parsing"},{"location":"references/editor-services/parsing/#parsing","text":"Parsing language files in an editor is configured in the language section of an ESV file . The syntax is as follows: language table : $Path start symbols : $Sorts line comment : $String block comment : $String * $String fences : $Fences For example: language table : target/metaborg/sdf . tbl start symbols : File line comment : \"//\" block comment : \"/*\" * \"*/\" fences : [ ] ( ) { }","title":"Parsing"},{"location":"references/editor-services/parsing/#parse-table","text":"The parse table of your language is set with the table key. By default, the parse table of an SDF specification is always produced at target/metaborg/sdf.tbl . It is only necessary to change this configuration when a custom parse table is used.","title":"Parse Table"},{"location":"references/editor-services/parsing/#start-symbols","text":"The start symbols option determine which start symbols to use when an editor is opened. This must be a subset of the start symbols defined in the SDF3 specification of your language. Multiple start symbols can be set with a comma-separated list: language start symbols : Start , Program","title":"Start Symbols"},{"location":"references/editor-services/parsing/#comments","text":"The syntax for comments is: language line comment : $String block comment : $String * $String For example, Java comments are specified as: language line comment : \"//\" block comment : \"/*\" * \"*/\" The line comment key determines how single-line comments are created. It is used by editors to toggle the comment for a single line. For example, in Eclipse, pressing ++ctrl+/++ (++cmd+/++ on macOS), respectively comments or uncomments the line. The block comment key determines how multi-line comments are created. It is used when a whole block needs to be commented or uncommented. A block comment is described by the two strings denoting the start and end symbols of the block comment respectively.","title":"Comments"},{"location":"references/editor-services/parsing/#fences","text":"Fences for bracket matching are set as follows: language fences : $Fences The fences key determines which symbols to use and match for bracket matching. A single fence is defined by a starting and closing symbol. Multiple fences can be set with a space-separated list. Fences are used to do bracket matching in text editors. For example, the default fences in a new Spoofax language project are: language fences : [ ] ( ) { } Multi-Character Fences Fences can contain multiple characters, but some implementations may not handle bracket matching with multiple fence characters. For example, Eclipse does not handle this case and ignores multi-character fences.","title":"Fences"},{"location":"references/editor-services/reference-resolution/","text":"Reference Resolution \u00b6 ESV: References Reference Resolution","title":"Reference Resolution"},{"location":"references/editor-services/reference-resolution/#reference-resolution","text":"ESV: References Reference Resolution","title":"Reference Resolution"},{"location":"references/editor-services/renaming/","text":"","title":"Renaming"},{"location":"references/editor-services/syntax-highlighting/","text":"Syntax Highlighting \u00b6 Token-based syntax highlighting is configured in a colorer section of an ESV file . Such a section can contain style definitions and styling rules. Style Definitions \u00b6 Style definitions bind an identifier to a style for later reuse, using the syntax: $ID = $Style Styles \u00b6 A style specifies a combination of a foreground color, optional background color, and optional font style. Colors are specified as Red-Green-Blue values ranging from 0 (none) to 255 (full). The possible font attributes are: Font attribute Description (none) Normal font. bold Bold font. italic Italic font. bold italic Bond and italic font. italic bold Same as bold italic . For example, the following style definitions bind the red , green , and blue colors: colorer red = 255 0 0 green = 0 255 0 blue = 0 0 255 An optional background color can be set by adding another RGB value: colorer redWithGreenBackground = 255 0 0 0 255 0 The font attributes can be used to make the font bold or italic: colorer redWithBold = 255 0 0 bold redWithItalic = 255 0 0 italic redWithGreenBackgroundWithBoldItalic = 255 0 0 0 255 0 bold italic Style Rules \u00b6 Style rules assign a style to matched tokens with syntax: $Matcher : $Style Or assigns a previously defined style definition: $Matcher : $Ref The left hand side of style rules matches a token, whereas the right hand side assigns a style by referring to a previously defined style definition, or by directly assigning a style. For example, the following matches a token type and references a style definition: colorer operator : black whereas the following matches a token with a sort and constructor, and directly assigns a style: colorer ClassBodyDec . MethodDec : 0 255 0 Matchers \u00b6 There are several ways in which the matcher on the left-hand side of a style rule can be specified: by type, by sort, by constructor, or by sort and constructor. Match by Sort and Constructor \u00b6 The combination of a token sort and constructor can be matched by specifying the $Sort.$Constructor . For example: colorer ClassBodyDec.MethodDec : yellow ClassBodyDec.FieldDec : red Match by Constructor \u00b6 It is also possible to match constructors, regardless of their token sorts, using _ in place of the sort name. For example: colorer _ . Str : blue _ . StrCong : blue _ . QStr : blue _ . QDollar : blue _ . QBr : gray Match by Sort \u00b6 Additionally, it is possible to match any constructor for a specific sort. For this, just specify the name of the sort, $Sort . For example: colorer ID : darkblue TYPEID : blue JQTYPEID : blue PQTYPEID : blue FUNCID : 153 51 0 JFUNCID : 153 51 0 STRING : 177 47 2 Match by Type \u00b6 Finally, the following built-in token types can be matched on: identifier \u2014 matches identifiers, found by lexical non-terminals without numbers; keyword \u2014 matches keywords, found by terminals in the syntax definition; layout \u2014 matches layout, such as whitespace and comments, found by layout definition; number \u2014 matches numbers, found by lexical non-terminals with numbers; operator \u2014 matches operations, found by terminals that contain just symbols (no characters); string \u2014 matches strings, found by lexical non-terminals that include quotation marks; unknown \u2014 matches tokens which the parser was unable to infer a type for. var error For example, the following code defines a simple highlighting with token types: colorer keyword : 153 51 153 identifier : black string : 177 47 2 number : 17 131 22 operator : black layout : 63 127 95 italic","title":"Syntax Highlighting"},{"location":"references/editor-services/syntax-highlighting/#syntax-highlighting","text":"Token-based syntax highlighting is configured in a colorer section of an ESV file . Such a section can contain style definitions and styling rules.","title":"Syntax Highlighting"},{"location":"references/editor-services/syntax-highlighting/#style-definitions","text":"Style definitions bind an identifier to a style for later reuse, using the syntax: $ID = $Style","title":"Style Definitions"},{"location":"references/editor-services/syntax-highlighting/#styles","text":"A style specifies a combination of a foreground color, optional background color, and optional font style. Colors are specified as Red-Green-Blue values ranging from 0 (none) to 255 (full). The possible font attributes are: Font attribute Description (none) Normal font. bold Bold font. italic Italic font. bold italic Bond and italic font. italic bold Same as bold italic . For example, the following style definitions bind the red , green , and blue colors: colorer red = 255 0 0 green = 0 255 0 blue = 0 0 255 An optional background color can be set by adding another RGB value: colorer redWithGreenBackground = 255 0 0 0 255 0 The font attributes can be used to make the font bold or italic: colorer redWithBold = 255 0 0 bold redWithItalic = 255 0 0 italic redWithGreenBackgroundWithBoldItalic = 255 0 0 0 255 0 bold italic","title":"Styles"},{"location":"references/editor-services/syntax-highlighting/#style-rules","text":"Style rules assign a style to matched tokens with syntax: $Matcher : $Style Or assigns a previously defined style definition: $Matcher : $Ref The left hand side of style rules matches a token, whereas the right hand side assigns a style by referring to a previously defined style definition, or by directly assigning a style. For example, the following matches a token type and references a style definition: colorer operator : black whereas the following matches a token with a sort and constructor, and directly assigns a style: colorer ClassBodyDec . MethodDec : 0 255 0","title":"Style Rules"},{"location":"references/editor-services/syntax-highlighting/#matchers","text":"There are several ways in which the matcher on the left-hand side of a style rule can be specified: by type, by sort, by constructor, or by sort and constructor.","title":"Matchers"},{"location":"references/editor-services/syntax-highlighting/#match-by-sort-and-constructor","text":"The combination of a token sort and constructor can be matched by specifying the $Sort.$Constructor . For example: colorer ClassBodyDec.MethodDec : yellow ClassBodyDec.FieldDec : red","title":"Match by Sort and Constructor"},{"location":"references/editor-services/syntax-highlighting/#match-by-constructor","text":"It is also possible to match constructors, regardless of their token sorts, using _ in place of the sort name. For example: colorer _ . Str : blue _ . StrCong : blue _ . QStr : blue _ . QDollar : blue _ . QBr : gray","title":"Match by Constructor"},{"location":"references/editor-services/syntax-highlighting/#match-by-sort","text":"Additionally, it is possible to match any constructor for a specific sort. For this, just specify the name of the sort, $Sort . For example: colorer ID : darkblue TYPEID : blue JQTYPEID : blue PQTYPEID : blue FUNCID : 153 51 0 JFUNCID : 153 51 0 STRING : 177 47 2","title":"Match by Sort"},{"location":"references/editor-services/syntax-highlighting/#match-by-type","text":"Finally, the following built-in token types can be matched on: identifier \u2014 matches identifiers, found by lexical non-terminals without numbers; keyword \u2014 matches keywords, found by terminals in the syntax definition; layout \u2014 matches layout, such as whitespace and comments, found by layout definition; number \u2014 matches numbers, found by lexical non-terminals with numbers; operator \u2014 matches operations, found by terminals that contain just symbols (no characters); string \u2014 matches strings, found by lexical non-terminals that include quotation marks; unknown \u2014 matches tokens which the parser was unable to infer a type for. var error For example, the following code defines a simple highlighting with token types: colorer keyword : 153 51 153 identifier : black string : 177 47 2 number : 17 131 22 operator : black layout : 63 127 95 italic","title":"Match by Type"},{"location":"references/flowspec/Stratego_API/","text":"Stratego API \u00b6 Strategies for interfacing with FlowSpec from Stratego. Execution, configuration, extracting results. Setup \u00b6 Execution \u00b6 Querying \u00b6","title":"Stratego API"},{"location":"references/flowspec/Stratego_API/#stratego-api","text":"Strategies for interfacing with FlowSpec from Stratego. Execution, configuration, extracting results.","title":"Stratego API"},{"location":"references/flowspec/Stratego_API/#setup","text":"","title":"Setup"},{"location":"references/flowspec/Stratego_API/#execution","text":"","title":"Execution"},{"location":"references/flowspec/Stratego_API/#querying","text":"","title":"Querying"},{"location":"references/flowspec/glossary/","text":"Glossary \u00b6","title":"Glossary"},{"location":"references/flowspec/glossary/#glossary","text":"","title":"Glossary"},{"location":"references/flowspec/introduction/","text":"Introduction \u00b6","title":"Introduction"},{"location":"references/flowspec/introduction/#introduction","text":"","title":"Introduction"},{"location":"references/flowspec/references/","text":"References \u00b6","title":"References"},{"location":"references/flowspec/references/#references","text":"","title":"References"},{"location":"references/flowspec/structure/","text":"Structure \u00b6 Modules \u00b6 A module is defined by a single flowspec file. A module can contain several sections, for defining control flow, data flow, types, and functions. Modules can import other modules. module _module-id_ imports _module-ref*_ _section*_ Control Flow \u00b6 The control flow section contains the rules that define the control flow for the sorts in the subject grammar. control-flow rules control-flow-rule* Control Flow Rules \u00b6 pattern* = {cfg-edges \",\"}+ cfg-edges = {cfg-edge-end \"->\"}+ cfg-edge-end = \"entry\" | \"exit\" | variable | \"node\" variable | \"this\" Example. module control control-flow rules node Int(_) Add(l, r) = entry -> l -> r -> this -> exit Root Rules \u00b6 Data Flow \u00b6 Properties \u00b6 Rules \u00b6 Lattices \u00b6 Types \u00b6 Expressions \u00b6 Literals \u00b6 Sets and Maps \u00b6 Literals Union, Diff, Contains, Intersect Comprehension Match \u00b6 Variables and References \u00b6 Functions \u00b6 Property Lookup \u00b6 Term Positions \u00b6 Lattices \u00b6 Lattice operations Functions \u00b6 Lexical Grammar \u00b6","title":"Structure"},{"location":"references/flowspec/structure/#structure","text":"","title":"Structure"},{"location":"references/flowspec/structure/#modules","text":"A module is defined by a single flowspec file. A module can contain several sections, for defining control flow, data flow, types, and functions. Modules can import other modules. module _module-id_ imports _module-ref*_ _section*_","title":"Modules"},{"location":"references/flowspec/structure/#control-flow","text":"The control flow section contains the rules that define the control flow for the sorts in the subject grammar. control-flow rules control-flow-rule*","title":"Control Flow"},{"location":"references/flowspec/structure/#control-flow-rules","text":"pattern* = {cfg-edges \",\"}+ cfg-edges = {cfg-edge-end \"->\"}+ cfg-edge-end = \"entry\" | \"exit\" | variable | \"node\" variable | \"this\" Example. module control control-flow rules node Int(_) Add(l, r) = entry -> l -> r -> this -> exit","title":"Control Flow Rules"},{"location":"references/flowspec/structure/#root-rules","text":"","title":"Root Rules"},{"location":"references/flowspec/structure/#data-flow","text":"","title":"Data Flow"},{"location":"references/flowspec/structure/#properties","text":"","title":"Properties"},{"location":"references/flowspec/structure/#rules","text":"","title":"Rules"},{"location":"references/flowspec/structure/#lattices","text":"","title":"Lattices"},{"location":"references/flowspec/structure/#types","text":"","title":"Types"},{"location":"references/flowspec/structure/#expressions","text":"","title":"Expressions"},{"location":"references/flowspec/structure/#literals","text":"","title":"Literals"},{"location":"references/flowspec/structure/#sets-and-maps","text":"Literals Union, Diff, Contains, Intersect Comprehension","title":"Sets and Maps"},{"location":"references/flowspec/structure/#match","text":"","title":"Match"},{"location":"references/flowspec/structure/#variables-and-references","text":"","title":"Variables and References"},{"location":"references/flowspec/structure/#functions","text":"","title":"Functions"},{"location":"references/flowspec/structure/#property-lookup","text":"","title":"Property Lookup"},{"location":"references/flowspec/structure/#term-positions","text":"","title":"Term Positions"},{"location":"references/flowspec/structure/#lattices_1","text":"Lattice operations","title":"Lattices"},{"location":"references/flowspec/structure/#functions_1","text":"","title":"Functions"},{"location":"references/flowspec/structure/#lexical-grammar","text":"","title":"Lexical Grammar"},{"location":"references/flowspec/testing/","text":"Testing \u00b6","title":"Testing"},{"location":"references/flowspec/testing/#testing","text":"","title":"Testing"},{"location":"references/statix/","text":"Statix \u00b6 Meta-language for Specification of Static Semantics.","title":"Statix"},{"location":"references/statix/#statix","text":"Meta-language for Specification of Static Semantics.","title":"Statix"},{"location":"references/statix/constraints/","text":"Constraints \u00b6 Built-in Constraints \u00b6 True \u00b6 False \u00b6 Conjunction \u00b6 Equality \u00b6 Disequality \u00b6 briefly describe disequality with free variables Exists \u00b6 Try \u00b6 New \u00b6 Assert Edge \u00b6 Assert Declaration \u00b6 Query \u00b6 AST Identifiers \u00b6 AST Property \u00b6 Arithmetic Constraints \u00b6 User Constraints \u00b6 Higher-Order Constraints \u00b6 Messages \u00b6","title":"Constraints"},{"location":"references/statix/constraints/#constraints","text":"","title":"Constraints"},{"location":"references/statix/constraints/#built-in-constraints","text":"","title":"Built-in Constraints"},{"location":"references/statix/constraints/#true","text":"","title":"True"},{"location":"references/statix/constraints/#false","text":"","title":"False"},{"location":"references/statix/constraints/#conjunction","text":"","title":"Conjunction"},{"location":"references/statix/constraints/#equality","text":"","title":"Equality"},{"location":"references/statix/constraints/#disequality","text":"briefly describe disequality with free variables","title":"Disequality"},{"location":"references/statix/constraints/#exists","text":"","title":"Exists"},{"location":"references/statix/constraints/#try","text":"","title":"Try"},{"location":"references/statix/constraints/#new","text":"","title":"New"},{"location":"references/statix/constraints/#assert-edge","text":"","title":"Assert Edge"},{"location":"references/statix/constraints/#assert-declaration","text":"","title":"Assert Declaration"},{"location":"references/statix/constraints/#query","text":"","title":"Query"},{"location":"references/statix/constraints/#ast-identifiers","text":"","title":"AST Identifiers"},{"location":"references/statix/constraints/#ast-property","text":"","title":"AST Property"},{"location":"references/statix/constraints/#arithmetic-constraints","text":"","title":"Arithmetic Constraints"},{"location":"references/statix/constraints/#user-constraints","text":"","title":"User Constraints"},{"location":"references/statix/constraints/#higher-order-constraints","text":"","title":"Higher-Order Constraints"},{"location":"references/statix/constraints/#messages","text":"","title":"Messages"},{"location":"references/statix/modules/","text":"Modules \u00b6 Sections \u00b6 Imports \u00b6 Signatures \u00b6 Rules \u00b6","title":"Modules"},{"location":"references/statix/modules/#modules","text":"","title":"Modules"},{"location":"references/statix/modules/#sections","text":"","title":"Sections"},{"location":"references/statix/modules/#imports","text":"","title":"Imports"},{"location":"references/statix/modules/#signatures","text":"","title":"Signatures"},{"location":"references/statix/modules/#rules","text":"","title":"Rules"},{"location":"references/statix/rules/","text":"Rules \u00b6 Rule Declarations \u00b6 Axiom rules \u00b6 Functional Rules \u00b6 Mapping rules \u00b6 Injections of namespaces, relations and constraints \u00b6","title":"Rules"},{"location":"references/statix/rules/#rules","text":"","title":"Rules"},{"location":"references/statix/rules/#rule-declarations","text":"","title":"Rule Declarations"},{"location":"references/statix/rules/#axiom-rules","text":"","title":"Axiom rules"},{"location":"references/statix/rules/#functional-rules","text":"","title":"Functional Rules"},{"location":"references/statix/rules/#mapping-rules","text":"","title":"Mapping rules"},{"location":"references/statix/rules/#injections-of-namespaces-relations-and-constraints","text":"","title":"Injections of namespaces, relations and constraints"},{"location":"references/statix/signatures/","text":"Signatures \u00b6 Sorts \u00b6 aliases Constructors \u00b6 Labels \u00b6 Relations \u00b6 Namespaces \u00b6 Name-resolution \u00b6 Constraints \u00b6","title":"Signatures"},{"location":"references/statix/signatures/#signatures","text":"","title":"Signatures"},{"location":"references/statix/signatures/#sorts","text":"aliases","title":"Sorts"},{"location":"references/statix/signatures/#constructors","text":"","title":"Constructors"},{"location":"references/statix/signatures/#labels","text":"","title":"Labels"},{"location":"references/statix/signatures/#relations","text":"","title":"Relations"},{"location":"references/statix/signatures/#namespaces","text":"","title":"Namespaces"},{"location":"references/statix/signatures/#name-resolution","text":"","title":"Name-resolution"},{"location":"references/statix/signatures/#constraints","text":"","title":"Constraints"},{"location":"references/statix/stratego-api/","text":"Stratego API \u00b6 Executing the Solver \u00b6 Querying the Analysis Result \u00b6","title":"Stratego API"},{"location":"references/statix/stratego-api/#stratego-api","text":"","title":"Stratego API"},{"location":"references/statix/stratego-api/#executing-the-solver","text":"","title":"Executing the Solver"},{"location":"references/statix/stratego-api/#querying-the-analysis-result","text":"","title":"Querying the Analysis Result"},{"location":"references/statix/terms/","text":"Terms \u00b6 Numerals \u00b6 Strings \u00b6 Identifiers \u00b6 lowercase id + wildcards Composite terms \u00b6 Tuples \u00b6 Lists \u00b6 various concat/tail types Functional Constraints \u00b6 Paths \u00b6 Name Ascription \u00b6 Type Ascription \u00b6 New \u00b6 Arithmetic Operations \u00b6 Occurrences \u00b6 Namespace Query \u00b6 Assertion Match \u00b6","title":"Terms"},{"location":"references/statix/terms/#terms","text":"","title":"Terms"},{"location":"references/statix/terms/#numerals","text":"","title":"Numerals"},{"location":"references/statix/terms/#strings","text":"","title":"Strings"},{"location":"references/statix/terms/#identifiers","text":"lowercase id + wildcards","title":"Identifiers"},{"location":"references/statix/terms/#composite-terms","text":"","title":"Composite terms"},{"location":"references/statix/terms/#tuples","text":"","title":"Tuples"},{"location":"references/statix/terms/#lists","text":"various concat/tail types","title":"Lists"},{"location":"references/statix/terms/#functional-constraints","text":"","title":"Functional Constraints"},{"location":"references/statix/terms/#paths","text":"","title":"Paths"},{"location":"references/statix/terms/#name-ascription","text":"","title":"Name Ascription"},{"location":"references/statix/terms/#type-ascription","text":"","title":"Type Ascription"},{"location":"references/statix/terms/#new","text":"","title":"New"},{"location":"references/statix/terms/#arithmetic-operations","text":"","title":"Arithmetic Operations"},{"location":"references/statix/terms/#occurrences","text":"","title":"Occurrences"},{"location":"references/statix/terms/#namespace-query","text":"","title":"Namespace Query"},{"location":"references/statix/terms/#assertion-match","text":"","title":"Assertion Match"},{"location":"references/statix/tests/","text":"Tests \u00b6 Test Format \u00b6 Test Output \u00b6 Substitution \u00b6 Scope Graph \u00b6 Messages \u00b6","title":"Tests"},{"location":"references/statix/tests/#tests","text":"","title":"Tests"},{"location":"references/statix/tests/#test-format","text":"","title":"Test Format"},{"location":"references/statix/tests/#test-output","text":"","title":"Test Output"},{"location":"references/statix/tests/#substitution","text":"","title":"Substitution"},{"location":"references/statix/tests/#scope-graph","text":"","title":"Scope Graph"},{"location":"references/statix/tests/#messages","text":"","title":"Messages"},{"location":"references/statix/types/","text":"Types \u00b6 Literal Types \u00b6 Term Types \u00b6 Constraint Types \u00b6 Permission to Extend \u00b6","title":"Types"},{"location":"references/statix/types/#types","text":"","title":"Types"},{"location":"references/statix/types/#literal-types","text":"","title":"Literal Types"},{"location":"references/statix/types/#term-types","text":"","title":"Term Types"},{"location":"references/statix/types/#constraint-types","text":"","title":"Constraint Types"},{"location":"references/statix/types/#permission-to-extend","text":"","title":"Permission to Extend"},{"location":"references/stratego/","text":"Stratego \u00b6 The Stratego language caters for the definition of program transformations. Transformations operate on the abstract syntax trees of programs. Abstract syntax trees are represented by means of first-order terms . By using the concrete syntax of a language, transformations can be expressed in the native syntax of the language under transformation, rather than using abstract syntax. A program is structured as a collection of modules , which may import each other. Transformations are defined by means of named rewrite rules . Rules may explicitly invoke rules. Alternatively, rules may be invoked by strategies that define how to combine rules into a more complex transformation using strategy combinators . Context-sensitive transformations can be expressed using dynamic rewrite rules . Starting with Stratego 2, terms and transformation strategies are (gradually) typed . Source \u00b6 The sources of the Stratego implementation can be found at https://github.com/metaborg/stratego : The Stratego language implementation https://github.com/metaborg/strategoxt : The Stratego/XT ecosystem Todo Give more specific links to syntax definition etc.","title":"Stratego"},{"location":"references/stratego/#stratego","text":"The Stratego language caters for the definition of program transformations. Transformations operate on the abstract syntax trees of programs. Abstract syntax trees are represented by means of first-order terms . By using the concrete syntax of a language, transformations can be expressed in the native syntax of the language under transformation, rather than using abstract syntax. A program is structured as a collection of modules , which may import each other. Transformations are defined by means of named rewrite rules . Rules may explicitly invoke rules. Alternatively, rules may be invoked by strategies that define how to combine rules into a more complex transformation using strategy combinators . Context-sensitive transformations can be expressed using dynamic rewrite rules . Starting with Stratego 2, terms and transformation strategies are (gradually) typed .","title":"Stratego"},{"location":"references/stratego/#source","text":"The sources of the Stratego implementation can be found at https://github.com/metaborg/stratego : The Stratego language implementation https://github.com/metaborg/strategoxt : The Stratego/XT ecosystem Todo Give more specific links to syntax definition etc.","title":"Source"},{"location":"references/stratego/concrete-syntax/","text":"Concrete Syntax \u00b6 Mixing Grammars \u00b6 ToTerm and FromTerm Imploding Terms \u00b6","title":"Concrete Syntax"},{"location":"references/stratego/concrete-syntax/#concrete-syntax","text":"","title":"Concrete Syntax"},{"location":"references/stratego/concrete-syntax/#mixing-grammars","text":"ToTerm and FromTerm","title":"Mixing Grammars"},{"location":"references/stratego/concrete-syntax/#imploding-terms","text":"","title":"Imploding Terms"},{"location":"references/stratego/dynamic-rules/","text":"Dynamic Rewrite Rules \u00b6","title":"Dynamic Rewrite Rules"},{"location":"references/stratego/dynamic-rules/#dynamic-rewrite-rules","text":"","title":"Dynamic Rewrite Rules"},{"location":"references/stratego/modules/","text":"Modules \u00b6 A Stratego program is organised as a collection of modules. File Extension \u00b6 A Stratego is a file with the extension .str2 for Stratego 2. Modules for the Stratego 1 version of the language have extension .str . Module Names \u00b6 Module names can be hierarchical For example, consider the following directory structure - trans - compilation - optimization.str2 - translation.str2 - desugaring - desugar.str2 If trans is declared as a root , then the module names are - trans - compilation - compilation/optimization - compilation/translation - desugaring - desugaring/desugar Module Structure \u00b6 A Stratego module has the following structure, where a single occurrence of a construct can actually be multiplied: module $ FileName imports $ FileName rules $ RuleDef strategies $ StrategyDef Imports \u00b6 A module should import all other modules from which it uses definitions. Imports are non-transitive modules can extend definitions Libraries \u00b6 pre-compiled libraries external definitions Concrete Syntax \u00b6 To use concrete syntax define a .meta file to accompany the module.","title":"Modules"},{"location":"references/stratego/modules/#modules","text":"A Stratego program is organised as a collection of modules.","title":"Modules"},{"location":"references/stratego/modules/#file-extension","text":"A Stratego is a file with the extension .str2 for Stratego 2. Modules for the Stratego 1 version of the language have extension .str .","title":"File Extension"},{"location":"references/stratego/modules/#module-names","text":"Module names can be hierarchical For example, consider the following directory structure - trans - compilation - optimization.str2 - translation.str2 - desugaring - desugar.str2 If trans is declared as a root , then the module names are - trans - compilation - compilation/optimization - compilation/translation - desugaring - desugaring/desugar","title":"Module Names"},{"location":"references/stratego/modules/#module-structure","text":"A Stratego module has the following structure, where a single occurrence of a construct can actually be multiplied: module $ FileName imports $ FileName rules $ RuleDef strategies $ StrategyDef","title":"Module Structure"},{"location":"references/stratego/modules/#imports","text":"A module should import all other modules from which it uses definitions. Imports are non-transitive modules can extend definitions","title":"Imports"},{"location":"references/stratego/modules/#libraries","text":"pre-compiled libraries external definitions","title":"Libraries"},{"location":"references/stratego/modules/#concrete-syntax","text":"To use concrete syntax define a .meta file to accompany the module.","title":"Concrete Syntax"},{"location":"references/stratego/rewrite-rules/","text":"Rewrite Rules \u00b6 Rewrite rules are used to define basic transformations in Stratego. Simple Rewrite Rules \u00b6 A simple rewrite rule has the form $ Label : $ Term - > $ Term It consists of a label that identifies the rule, a left-hand side term, and a right-hand side term. When a rule is invoked through its label, the current term is match against the left-hand side and replaced with an instantiation of the right-hand side. A rewrite rule is invoked by applying its label as Conditional Rewrite Rules \u00b6 $ Label : $ Term - > $ Term where $ Strategy With vs Where \u00b6 $ Label : $ Term - > $ Term with $ Strategy $ Label : $ Term - > $ Term where $ Strategy use a where clause when the condition is to determine whether to apply the rule use a with clause to perform a side computation; has to succeed; will try an exception when it fails Combining With and Where \u00b6 multiple with/where clauses $ Label : $ Term - > $ Term where $ Strategy with $ Strategy with $ Strategy where $ Strategy Parameterized Rewrite Rules \u00b6 $ Label ( $ StrategyArg | $ TermArg ) : $ Term - > $ Term where $ Strategy term parameters strategy parameters Typing Rewrite Rules \u00b6 $Label($StrategyTypes | $TermTypes) :: $Type -> $Type","title":"Rewrite Rules"},{"location":"references/stratego/rewrite-rules/#rewrite-rules","text":"Rewrite rules are used to define basic transformations in Stratego.","title":"Rewrite Rules"},{"location":"references/stratego/rewrite-rules/#simple-rewrite-rules","text":"A simple rewrite rule has the form $ Label : $ Term - > $ Term It consists of a label that identifies the rule, a left-hand side term, and a right-hand side term. When a rule is invoked through its label, the current term is match against the left-hand side and replaced with an instantiation of the right-hand side. A rewrite rule is invoked by applying its label as","title":"Simple Rewrite Rules"},{"location":"references/stratego/rewrite-rules/#conditional-rewrite-rules","text":"$ Label : $ Term - > $ Term where $ Strategy","title":"Conditional Rewrite Rules"},{"location":"references/stratego/rewrite-rules/#with-vs-where","text":"$ Label : $ Term - > $ Term with $ Strategy $ Label : $ Term - > $ Term where $ Strategy use a where clause when the condition is to determine whether to apply the rule use a with clause to perform a side computation; has to succeed; will try an exception when it fails","title":"With vs Where"},{"location":"references/stratego/rewrite-rules/#combining-with-and-where","text":"multiple with/where clauses $ Label : $ Term - > $ Term where $ Strategy with $ Strategy with $ Strategy where $ Strategy","title":"Combining With and Where"},{"location":"references/stratego/rewrite-rules/#parameterized-rewrite-rules","text":"$ Label ( $ StrategyArg | $ TermArg ) : $ Term - > $ Term where $ Strategy term parameters strategy parameters","title":"Parameterized Rewrite Rules"},{"location":"references/stratego/rewrite-rules/#typing-rewrite-rules","text":"$Label($StrategyTypes | $TermTypes) :: $Type -> $Type","title":"Typing Rewrite Rules"},{"location":"references/stratego/strategies/","text":"Strategy Definitions \u00b6 Simple Definitions \u00b6 Parameterized Definitions \u00b6 Local Definitions \u00b6 Extending Definitions \u00b6 Calling Primitives \u00b6 External Definitions \u00b6","title":"Strategy Definitions"},{"location":"references/stratego/strategies/#strategy-definitions","text":"","title":"Strategy Definitions"},{"location":"references/stratego/strategies/#simple-definitions","text":"","title":"Simple Definitions"},{"location":"references/stratego/strategies/#parameterized-definitions","text":"","title":"Parameterized Definitions"},{"location":"references/stratego/strategies/#local-definitions","text":"","title":"Local Definitions"},{"location":"references/stratego/strategies/#extending-definitions","text":"","title":"Extending Definitions"},{"location":"references/stratego/strategies/#calling-primitives","text":"","title":"Calling Primitives"},{"location":"references/stratego/strategies/#external-definitions","text":"","title":"External Definitions"},{"location":"references/stratego/strategy-combinators/","text":"Strategy Combinators \u00b6 Match \u00b6 Build \u00b6 Sequential Composition \u00b6 All \u00b6 One \u00b6","title":"Strategy Combinators"},{"location":"references/stratego/strategy-combinators/#strategy-combinators","text":"","title":"Strategy Combinators"},{"location":"references/stratego/strategy-combinators/#match","text":"","title":"Match"},{"location":"references/stratego/strategy-combinators/#build","text":"","title":"Build"},{"location":"references/stratego/strategy-combinators/#sequential-composition","text":"","title":"Sequential Composition"},{"location":"references/stratego/strategy-combinators/#all","text":"","title":"All"},{"location":"references/stratego/strategy-combinators/#one","text":"","title":"One"},{"location":"references/stratego/terms/","text":"Terms \u00b6 Stratego programs transform terms. When using Stratego for program transformation, terms typically represent the abstract syntax tree of a program. But Stratego does not much care what a term represents. Terms can just as well represent structured documents, software models, or anything else that can be rendered in a structured format. Generally program text is transformed into a term by means of parsing, and turned back into program text by means of pretty-printing. One way to achieve this is by using [SDF3]{.doc} . For most of the examples, we will just assume that we have terms that should be transformed and ignore parsing and pretty-printing. However, when we turn to running examples in the Spoofax environment in the Eclipse IDE, we will rely on SDF3 as that is the primary way to produce terms in Spoofax/Eclipse. Annotated Term Format \u00b6 Terms in Stratego are terms in the Annotated Term Format , or ATerms for short. The ATerm format provides a set of constructs for representing trees, comparable to XML or abstract data types in functional programming languages. For example, the code 4 + f(5 * x) might be represented in a term as: Plus(Int(\"4\"), Call(\"f\", [Mul(Int(\"5\"), Var(\"x\"))])) ATerms are constructed from the following elements: Integer : An integer constant, that is a list of decimal digits, is an ATerm. Examples: 1 , 12343 {.docutils .literal .notranslate}. String : A string constant, that is a list of characters between double quotes is an ATerm. Special characters such as double quotes and newlines should be escaped using a backslash. The backslash character itself should be escaped as well. Examples: \"foobar\" , \"string with quotes\\\"\" , \"escaped escape character\\\\ and a newline\\n\" . Constructor application : A constructor is an identifier, that is an alphanumeric string starting with a letter, or a double quoted string. A constructor application c(t1,...,tn) creates a term by applying a constructor to a list of zero or more terms. For example, the term Plus(Int(\"4\"),Var(\"x\")) uses the constructors Plus , Int , and Var to create a nested term from the strings \"4\" and \"x\" . List : A list is a term of the form [t1,...,tn] , that is a list of zero or more terms between square brackets. While all applications of a specific constructor typically have the same number of subterms, lists can have a variable number of subterms. The elements of a list are typically of the same type, while the subterms of a constructor application can vary in type. Example: The second argument of the call to \"f\" in the term Call(\"f\",[Int(\"5\"),Var(\"x\")]) is a list of expressions. Tuple : A tuple (t1,...,tn) is a constructor application without a constructor. Example: (Var(\"x\"), Type(\"int\")) Annotation : The elements defined above are used to create the structural part of terms. Optionally, a term can be annotated with a list of terms. These annotations typically carry additional semantic information about the term. An annotated term has the form t{t1,...,tn} . Example: Lt(Var(\"n\"),Int(\"1\")){Type(\"bool\")} . The contents of annotations is up to the application. Persistent Representation \u00b6 The term format described above is used in Stratego programs to denote terms, but is also used to exchange terms between programs. Thus, the internal format and the external format exactly coincide. Of course, internally a Stratego program uses a data-structure in memory with pointers rather than manipulating a textual representation of terms. But this is completely hidden from the Stratego programmer. Namespaces \u00b6 qualified names ... Todo","title":"Terms"},{"location":"references/stratego/terms/#terms","text":"Stratego programs transform terms. When using Stratego for program transformation, terms typically represent the abstract syntax tree of a program. But Stratego does not much care what a term represents. Terms can just as well represent structured documents, software models, or anything else that can be rendered in a structured format. Generally program text is transformed into a term by means of parsing, and turned back into program text by means of pretty-printing. One way to achieve this is by using [SDF3]{.doc} . For most of the examples, we will just assume that we have terms that should be transformed and ignore parsing and pretty-printing. However, when we turn to running examples in the Spoofax environment in the Eclipse IDE, we will rely on SDF3 as that is the primary way to produce terms in Spoofax/Eclipse.","title":"Terms"},{"location":"references/stratego/terms/#annotated-term-format","text":"Terms in Stratego are terms in the Annotated Term Format , or ATerms for short. The ATerm format provides a set of constructs for representing trees, comparable to XML or abstract data types in functional programming languages. For example, the code 4 + f(5 * x) might be represented in a term as: Plus(Int(\"4\"), Call(\"f\", [Mul(Int(\"5\"), Var(\"x\"))])) ATerms are constructed from the following elements: Integer : An integer constant, that is a list of decimal digits, is an ATerm. Examples: 1 , 12343 {.docutils .literal .notranslate}. String : A string constant, that is a list of characters between double quotes is an ATerm. Special characters such as double quotes and newlines should be escaped using a backslash. The backslash character itself should be escaped as well. Examples: \"foobar\" , \"string with quotes\\\"\" , \"escaped escape character\\\\ and a newline\\n\" . Constructor application : A constructor is an identifier, that is an alphanumeric string starting with a letter, or a double quoted string. A constructor application c(t1,...,tn) creates a term by applying a constructor to a list of zero or more terms. For example, the term Plus(Int(\"4\"),Var(\"x\")) uses the constructors Plus , Int , and Var to create a nested term from the strings \"4\" and \"x\" . List : A list is a term of the form [t1,...,tn] , that is a list of zero or more terms between square brackets. While all applications of a specific constructor typically have the same number of subterms, lists can have a variable number of subterms. The elements of a list are typically of the same type, while the subterms of a constructor application can vary in type. Example: The second argument of the call to \"f\" in the term Call(\"f\",[Int(\"5\"),Var(\"x\")]) is a list of expressions. Tuple : A tuple (t1,...,tn) is a constructor application without a constructor. Example: (Var(\"x\"), Type(\"int\")) Annotation : The elements defined above are used to create the structural part of terms. Optionally, a term can be annotated with a list of terms. These annotations typically carry additional semantic information about the term. An annotated term has the form t{t1,...,tn} . Example: Lt(Var(\"n\"),Int(\"1\")){Type(\"bool\")} . The contents of annotations is up to the application.","title":"Annotated Term Format"},{"location":"references/stratego/terms/#persistent-representation","text":"The term format described above is used in Stratego programs to denote terms, but is also used to exchange terms between programs. Thus, the internal format and the external format exactly coincide. Of course, internally a Stratego program uses a data-structure in memory with pointers rather than manipulating a textual representation of terms. But this is completely hidden from the Stratego programmer.","title":"Persistent Representation"},{"location":"references/stratego/terms/#namespaces","text":"qualified names ... Todo","title":"Namespaces"},{"location":"references/stratego/types/","text":"Types \u00b6 Signatures \u00b6 To use terms in Stratego programs, their constructors should be declared in a signature. A signature declares a number of sorts and a number of constructors for these sorts. For each constructor, a signature declares the number and types of its arguments. For example, the following signature declares some typical constructors for constructing abstract syntax trees of expressions in a programming language: signature sorts Id Exp constructors : String -> Id Var : Id -> Exp Int : Int -> Exp Plus : Exp * Exp -> Exp Mul : Exp * Exp -> Exp Call : Id * List(Exp) -> Exp Currently, the Stratego compiler only checks the arity of constructor applications against the signature. Still, it is considered good style to also declare the types of constructors in a sensible manner for the purpose of documentation. The situation in Spoofax/Eclipse is even more convenient; if you have an SDF3 language specification, Spoofax will automatically generate a corresponding signature definition that you can import into Stratego. Transformation Types \u00b6","title":"Types"},{"location":"references/stratego/types/#types","text":"","title":"Types"},{"location":"references/stratego/types/#signatures","text":"To use terms in Stratego programs, their constructors should be declared in a signature. A signature declares a number of sorts and a number of constructors for these sorts. For each constructor, a signature declares the number and types of its arguments. For example, the following signature declares some typical constructors for constructing abstract syntax trees of expressions in a programming language: signature sorts Id Exp constructors : String -> Id Var : Id -> Exp Int : Int -> Exp Plus : Exp * Exp -> Exp Mul : Exp * Exp -> Exp Call : Id * List(Exp) -> Exp Currently, the Stratego compiler only checks the arity of constructor applications against the signature. Still, it is considered good style to also declare the types of constructors in a sensible manner for the purpose of documentation. The situation in Spoofax/Eclipse is even more convenient; if you have an SDF3 language specification, Spoofax will automatically generate a corresponding signature definition that you can import into Stratego.","title":"Signatures"},{"location":"references/stratego/types/#transformation-types","text":"","title":"Transformation Types"},{"location":"references/syntax/","text":"SDF3 \u00b6","title":"SDF3"},{"location":"references/syntax/#sdf3","text":"","title":"SDF3"},{"location":"references/syntax/concepts/","text":"Language Concepts \u00b6 normalization symbols (terminals, non-terminals) start symbols sorts (non-terminals) character classes (terminals) literals quantifiers (optionals, lists) templates disambiguation","title":"Language Concepts"},{"location":"references/syntax/concepts/#language-concepts","text":"normalization symbols (terminals, non-terminals) start symbols sorts (non-terminals) character classes (terminals) literals quantifiers (optionals, lists) templates disambiguation","title":"Language Concepts"},{"location":"references/syntax/configuration/","text":"Configuration \u00b6 enable/disable placeholders parse table version parser generation parser version parsing logging","title":"Configuration"},{"location":"references/syntax/configuration/#configuration","text":"enable/disable placeholders parse table version parser generation parser version parsing logging","title":"Configuration"},{"location":"references/syntax/constructs/","text":"Constructs \u00b6 module import sections symbols character class literals sorts optionals lists alternatives (only for lexical syntax) sequences productions labels attributes reject prefer/avoid (depracated) priorities associativity restrictions template options","title":"Constructs"},{"location":"references/syntax/constructs/#constructs","text":"module import sections symbols character class literals sorts optionals lists alternatives (only for lexical syntax) sequences productions labels attributes reject prefer/avoid (depracated) priorities associativity restrictions template options","title":"Constructs"},{"location":"references/syntax/disambiguation/","text":"","title":"Disambiguation"},{"location":"references/syntax/layout-sensitive/","text":"Layout Sensitivity \u00b6 layout sensitivity (declarations / constraints) tree selectors align align-list offside indent","title":"Layout Sensitivity"},{"location":"references/syntax/layout-sensitive/#layout-sensitivity","text":"layout sensitivity (declarations / constraints) tree selectors align align-list offside indent","title":"Layout Sensitivity"},{"location":"references/syntax/normalization/","text":"Normalization \u00b6","title":"Normalization"},{"location":"references/syntax/normalization/#normalization","text":"","title":"Normalization"},{"location":"references/syntax/recovery/","text":"Recovery \u00b6 permissive grammars handwritten recovery rules","title":"Recovery"},{"location":"references/syntax/recovery/#recovery","text":"permissive grammars handwritten recovery rules","title":"Recovery"},{"location":"references/syntax/structure/","text":"Structure \u00b6 modules and imports definition per syntactic context (context-free/lexical/kernel)","title":"Structure"},{"location":"references/syntax/structure/#structure","text":"modules and imports definition per syntactic context (context-free/lexical/kernel)","title":"Structure"},{"location":"references/testing/","text":"SPT: Spoofax Testing Language \u00b6","title":"SPT: Spoofax Testing Language"},{"location":"references/testing/#spt-spoofax-testing-language","text":"","title":"SPT: Spoofax Testing Language"},{"location":"tutorials/","text":"Tutorials \u00b6 This page lists tutorials that take you step-by-step through a project to learn a variety of concepts and aspects of Spoofax in a specific scope. For guides on achieving specific tasks, see the How To's section. For the Spoofax language reference, see the References section. No tutorials yet.","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"This page lists tutorials that take you step-by-step through a project to learn a variety of concepts and aspects of Spoofax in a specific scope. For guides on achieving specific tasks, see the How To's section. For the Spoofax language reference, see the References section. No tutorials yet.","title":"Tutorials"}]}